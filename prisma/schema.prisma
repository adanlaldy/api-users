generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Likes {
  id         Int   @id @default(autoincrement())
  user_id    Int
  auction_id Int
  user       Users @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Like_user_id_fkey")
}

model Messages {
  id              Int           @id @default(autoincrement())
  message         String        @db.Text
  conversation_id Int
  created_at      DateTime      @default(now())
  is_read         Boolean       @default(false)
  conversation    Conversations @relation(fields: [conversation_id], references: [id])
}

model Conversations {
  id              Int       @id @default(autoincrement())
  last_message_at DateTime?
  created_at      DateTime  @default(now())
  user1_id        Int
  user2_id        Int
  user1           Users     @relation("User1", fields: [user1_id], references: [id])
  user2           Users     @relation("User2", fields: [user2_id], references: [id])

  message Messages[]

  @@index([user1_id], map: "Conversation_user1_id_fkey")
  @@index([user2_id], map: "Conversation_user2_id_fkey")
}

model Notifications {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  user_id    Int
  auction_id Int?
  message_id Int?
  user       Users    @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Notification_user_id_fkey")
}

model Purchases {
  id            Int      @id @default(autoincrement())
  purchase_date DateTime @default(now())
  final_price   Float    @db.Float
  auction_id    Int
  user_id       Int
  user          Users    @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Purchase_user_id_fkey")
}

model Users {
  id         Int       @id @default(autoincrement())
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  birth_date DateTime  @db.Date
  email      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  picture    String?   @db.VarChar(255)
  balance    Float     @db.Float
  role       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @db.Date
  deleted_at DateTime? @db.Date

  user1         Conversations[] @relation("User1")
  user2         Conversations[] @relation("User2")
  likes         Likes[]
  notifications Notifications[]
  purchases     Purchases[]
}
