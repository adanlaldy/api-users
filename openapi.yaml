openapi: 3.0.0
info:
  title: API users
  version: 2.0.0
servers:
  - url: http://localhost:3000/v1
paths:
  /users/register:
    post:
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "john"
                lastName:
                  type: string
                  example: "doe"
                birthDate:
                  type: string
                  example: "1990-05-25"
                email:
                  type: string
                  example: "john@doe.com"
                password:
                  type: string
                  example: "Azerty123."
                role:
                  type: boolean
                  example: "admin"
      responses:
        '201':
          description: User created
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users/login:
    post:
      summary: Login user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@doe.com"
                password:
                  type: string
                  example: "Azerty123."
      responses:
        '200':
          description: User logged in
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: A list of users
        '500':
          description: Internal server error
  /users/me:
    get:
      summary: Get user by token
      tags:
        - User
      responses:
        '200':
          description: User found
        401:
          description: Unauthorized
        '500':
          description: Internal server error
  /users/{id}:
    get:
      summary: Get user by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
        '500':
          description: Internal server error
    delete:
      summary: Delete user by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /users/update/{id}:
    put:
      summary: Update user by id
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                birthDate:
                  format: date-time
                  example: "2025-05-16T00:00:00.000Z"
                email:
                  type: string
                password:
                  type: string
                picture:
                  type: string
                balance:
                  type: number
                role:
                  type: string
      responses:
        '200':
          description: User updated
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /users/logout:
    delete:
      summary: Logout user
      tags:
        - User
      responses:
        '200':
          description: User logged out
        '500':
          description: Internal server error
  /purchases/:
    get:
      summary: Get all purchases
      responses:
        '200':
          description: A list of purchases
    post:
      summary: Create purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - finalPrice
                - auctionId
                - userId
              properties:
                finalPrice:
                  type: number
                  example: 123
                auctionId:
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 2
      responses:
        '201':
          description: Purchase created successfully
  /purchases/user/{userId}:
    get:
      summary: Get purchases by user id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: List of purchases by user
  /messages/send/:
    post:
      summary: Create message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - conversationId
              properties:
                content:
                  type: string
                  example: mon deuxi√®me message
                conversationId:
                  type: integer
                  example: 6
      responses:
        '201':
          description: Message sent successfully
  /messages/conversation/{conversationId}:
    get:
      summary: Get messages by conversation id
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: integer
            example: 6
      responses:
        '200':
          description: List of messages for the conversation
  /notifications/:
    post:
      summary: Create notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
                - auctionId
                - userId
                - messageId
              properties:
                content:
                  type: string
                  example: je suis un contenu
                auctionId:
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 2
                messageId:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Notification created successfully
  /notifications/user/{userId}:
    get:
      summary: Get notifications by user id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: List of notifications for the user
  /notifications/{id}:
    delete:
      summary: Delete notification by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Notification deleted successfully
  /likes/:
    post:
      summary: Create like
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - auctionId
              properties:
                userId:
                  type: integer
                  example: 2
                auctionId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Like created successfully
  /likes/{id}:
    delete:
      summary: Delete like by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 5
      responses:
        '204':
          description: Like deleted successfully
  /conversations/:
    post:
      summary: Create conversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user1Id
                - user2Id
              properties:
                user1Id:
                  type: integer
                  example: 2
                user2Id:
                  type: integer
                  example: 4
      responses:
        '201':
          description: Conversation created successfully